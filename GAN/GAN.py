# -*- coding: utf-8 -*-
"""Allam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DYWUkFxQyrRpphg8a-zlnVlPV43nAn1U
"""

import pydot
from keras.datasets import mnist
from keras.layers import Input, Dense, Reshape, Flatten, Dropout
from keras.layers import BatchNormalization, Activation, ZeroPadding2D
from keras.layers.advanced_activations import LeakyReLU
from keras.layers.convolutional import UpSampling2D, Conv2D, Conv2DTranspose
from keras.models import Sequential, Model
from keras.optimizers import Adam
from keras.utils.vis_utils import plot_model

import matplotlib.pyplot as plt

import sys
import os
import numpy as np




img_rows = 28
img_cols = 28
channels = 1
img_shape = (img_rows, img_cols, channels)
latent_dim = 100
optimizer = Adam(learning_rate=0.0002, beta_1=0.5)

def build_generator():
    model = Sequential(name='generator')

    model.add(Dense(256, input_dim=latent_dim))
    model.add(LeakyReLU(alpha=0.2))
    model.add(BatchNormalization(momentum=0.8))
    #model.add(Reshape((7, 7, 128)))

    model.add(Dense(512))
    #model.add(Conv2DTranspose(128, (4, 4), strides=(2, 2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    model.add(BatchNormalization(momentum=0.8))

    #.add(Conv2DTranspose(128, (4, 4), strides=(2, 2), padding='same'))
    model.add(Dense(1024))
    model.add(LeakyReLU(alpha=0.2))
    model.add(BatchNormalization(momentum=0.8))

    #model.add(Conv2D(1, (7, 7), activation='sigmoid', padding='same'))
    model.add(Dense(np.prod(img_shape), activation='tanh'))
    model.add(Reshape(img_shape))
    model.summary()

    noise = Input(shape=(latent_dim,))
    img = model(noise)

    return Model(noise, img)

def build_discriminator():
    model = Sequential(name='discriminator')
    model.add(Flatten(input_shape=img_shape))
    #model.add(Conv2D(64, (3, 3), strides=(2, 2), padding='same', input_shape=(28, 28, 1)))
    model.add(Dense(512))
    model.add(LeakyReLU(alpha=0.2))
    #model.add(Dropout(0.4))

    model.add(Dense(256))
    #model.add(Conv2D(64, (3, 3), strides=(2, 2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    #model.add(Dropout(0.4))
    model.add(Flatten())
    model.add(Dense(1, activation='sigmoid'))
    model.summary()
    img = Input(shape=img_shape)
    validity = model(img)

    return Model(img, validity)

def train(epochs, t_data, batch_size=64, sample_interval=50):
  res_g_loss = []
  t_data = t_data / 127.5 - 1.
  t_data = np.expand_dims(t_data, axis=3)

  valid = np.ones((batch_size, 1))
  fake = np.zeros((batch_size, 1))

  for epoch in range(epochs):
      idx = np.random.randint(0, t_data.shape[0], batch_size)
      imgs = t_data[idx]

      noise = np.random.normal(0, 1, (batch_size, latent_dim))

      gen_imgs = generator.predict(noise)

      d_loss_real = discriminator.train_on_batch(imgs, valid)
      d_loss_fake = discriminator.train_on_batch(gen_imgs, fake)
      d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)

      noise = np.random.normal(0, 1, (batch_size, latent_dim))
      g_loss = combined.train_on_batch(noise, valid)
      res_g_loss.append(g_loss)
      print("%d [d_loss_real: %.4f, d_loss_fake: %.4f] [g_loss: %.4f]" % (epoch, d_loss[0], d_loss[1], g_loss))

      if epoch % sample_interval == 0:
          sample_images(epoch)
  return res_g_loss

def sample_images(epoch):
  r, c = 5, 5
  noise = np.random.normal(0, 1, (r * c, latent_dim))
  gen_imgs = generator.predict(noise)

  gen_imgs = 0.5 * gen_imgs + 0.5

  fig, axs = plt.subplots(r, c)
  cnt = 0
  for i in range(r):
      for j in range(c):
          axs[i, j].imshow(gen_imgs[cnt, :, :, 0], cmap='gray')
          axs[i, j].axis('off')
          cnt += 1
  fig.savefig("images/%d.png" % epoch)
  plt.close()

discriminator = build_discriminator()
discriminator.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])

generator = build_generator()

gan_input = Input(shape=(latent_dim,))
img = generator(gan_input)
discriminator.trainable = False
validity = discriminator(img)
combined = Model(gan_input, validity)
combined.compile(loss='binary_crossentropy', optimizer=optimizer)

if not os.path.exists("./images"):
    os.makedirs("./images")
(X_train, Y_train), (X_test, Y_test) = mnist.load_data()
X_total = np.concatenate((X_train, X_test), axis=0)
gan = GAN()

g_loss = train(epochs=10000, batch_size=200, sample_interval=100, t_data=X_total)
print(np.mean(g_loss))
plt.figure()
plt.plot(g_loss)
plt.xlabel("epochs")
plt.ylabel("g_loss")
plt.savefig("images/g_loss.jpg")